esphome:
  name: haier-airco
  friendly_name: haier_airco

external_components:
  # equivalent shorthand for GitHub
  - source: github://paveldn/haier-esphome@experimental
    components: [ haier ]

#esp32:
#  board: esp32doit-devkit-v1
#  framework:
#    type: arduino

esp8266:
  board: nodemcuv2

# Enable logging
logger:
  level: DEBUG
  baud_rate: 0

# Enable Home Assistant API
api:
  services:
    - service: send_custom_message
      variables:
        message_type: int
        message_data: int[]
      then:
        - lambda: |-
            if ((message_type < 0) || (message_type > 255)) {
              ESP_LOGE("send_custom_command", "Wrong custom message type (should be byte)");
              return;  
            }
            if (message_data.size() == 0) {
              id(haier_ac).send_custom_command(haier_protocol::HaierMessage((haier_protocol::FrameType) message_type));
            } else {
              size_t sz = message_data.size();
              std::unique_ptr<uint8_t[]> msg_buffer(new uint8_t [sz]); 
              for (unsigned int i = 0; i < sz; i++)
                msg_buffer[i] = message_data[i];
              id(haier_ac).send_custom_command(haier_protocol::HaierMessage((haier_protocol::FrameType) message_type, msg_buffer.get(), sz));
            }

# Enable Web server.
#web_server:
#  port: 80

ota:
  password: "SECRET"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Haier-Airco Fallback Hotspot"
    password: "HMtC1fWBBAXz"

#captive_portal:

uart:
  baud_rate: 9600
  tx_pin: GPIO1 # 21
  rx_pin: GPIO3 # 20
  id: ac_port  

climate:
  - platform: haier
    id: haier_ac
    protocol: hOn
    name: Haier AC 
    uart_id: ac_port
    #wifi_signal: true           # Optional, default true, enables WiFI signal transmission from ESP to AC
    #beeper: true                # Optional, default true, disables beep on commands from ESP
    #display: true               # Optional, default true, can be used to turn off LED display
    #answer_timeout: 200ms       # Optional, request answer timeout, can be used to increase the timeout
    #                            # for some ACs that have longer answer delays
    #outdoor_temperature:        # Optional, outdoor temperature sensor
    #  name: Haier AC outdoor temperature
    visual:                     # Optional, you can use it to limit min and max temperatures in UI (not working for remote!)
      min_temperature: 17 °C
      max_temperature: 25 °C
      temperature_step: 1 °C
    #supported_modes:            # Optional, can be used to disable some modes if you don't need them
    #  - 'OFF'
    #  - AUTO
    #  - COOL
    #  - HEAT
    #  - DRY
    #  - FAN_ONLY
    supported_presets:          # Optional, can be used to disable some presets if your AC does not support it
    #  - AWAY
      - ECO
      - BOOST
      - SLEEP
    supported_swing_modes:      # Optional, can be used to disable some (or all) swing modes if your AC does not support it
      - 'OFF'
    #  - VERTICAL
    #  - HORIZONTAL
    #  - BOTH
    control_packet_size: 18
    control_method: SET_SINGLE_PARAMETER
    on_alarm_start:
      then:
        - logger.log:
            level: WARN
            format: "Alarm activated. Code: %d. Message: \"%s\""
            args: [ code, message]
    on_alarm_end:
      then:
        - logger.log:
            level: INFO
            format: "Alarm deactivated. Code: %d. Message: \"%s\""
            args: [ code, message]
    on_status_message:
      then:
        - globals.set:
            id: low_noise_out
            value: !lambda |-
              if (data_size > 16)
                return (data[16] & 0x01) != 0;
              return false;

sensor:
  - platform: haier
    haier_id: haier_ac
    outdoor_temperature:
      name: Haier outdoor temperature
    humidity:
      name: Haier Indoor Humidity
    compressor_current:
      name: Haier Compressor Current
    compressor_frequency:
      name: Haier Compressor Frequency
    expansion_valve_open_degree:
      name: Haier Expansion Valve Open Degree
    indoor_coil_temperature:
      name: Haier Indoor Coil Temperature
    outdoor_coil_temperature:
      name: Haier Outdoor Coil Temperature
    outdoor_defrost_temperature:
      name: Haier Outdoor Defrost Temperature
    outdoor_in_air_temperature:
      name: Haier Outdoor In Air Temperature
    outdoor_out_air_temperature:
      name: Haier Outdoor Out Air Temperature
    power:
      name: Haier Power

binary_sensor:
  - platform: haier
    haier_id: haier_ac
    compressor_status:
      name: Haier Outdoor Compressor Status
    defrost_status:
      name: Haier Defrost Status
    four_way_valve_status:
      name: Haier Four Way Valve Status
    indoor_electric_heating_status:
      name: Haier Indoor Electric Heating Status
    indoor_fan_status:
      name: Haier Indoor Fan Status
    outdoor_fan_status:
      name: Haier Outdoor Fan Status


# Text sensors with general information.
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    name: ESPHome Version
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: IP

# Exposed switches.
button:
  # Switch to restart the doorbell.
  - platform: restart
    name: Restart

switch:
  - platform: template
    id: health_switch
    name: Health mode (UV)
    restore_mode: RESTORE_DEFAULT_OFF
    icon: mdi:blur-radial
    lambda: |-
      return id(haier_ac).get_health_mode();
    turn_on_action:
      climate.haier.health_on: haier_ac
    turn_off_action:
      climate.haier.health_off: haier_ac
  - platform: template
    name: Low Noise Outside
    optimistic: false
    lambda: return id(low_noise_out);
    turn_on_action:
      then:
        - lambda: id(haier_ac).send_custom_command(haier_protocol::HaierMessage(haier_protocol::FrameType::CONTROL, (const uint8_t[]) {0x5D, 0x13, 0x00, 0x01}, 4));
    turn_off_action:
      then:
        - lambda: id(haier_ac).send_custom_command(haier_protocol::HaierMessage(haier_protocol::FrameType::CONTROL, (const uint8_t[]) {0x5D, 0x13, 0x00, 0x00}, 4));

globals:
  - id: low_noise_out
    type: bool
    restore_value: no
    initial_value: 'false'
